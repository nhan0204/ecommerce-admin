generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlserver"
  url      = env("DATABASE_URL")
}

model Store {
  id  String  @id @default(uuid())
  name  String
  UserId  String
  billboards Billboard[] @relation("StoreToBillboard")
  categories Category[] @relation("StoreToCategory")
  sizes  Size[] @relation("StoreToSize")
  colors  Color[] @relation("StoreToColor")
  products  Product[] @relation("StoreToProduct")
  orders  Order[]  @relation("StoreToOrder")
  createdAt DateTime  @default(now())
  updated DateTime  @updatedAt
}

model Billboard {
  id  String  @id @default(uuid())
  storeId String
  store Store @relation("StoreToBillboard", fields: [storeId], references: [id])
  label String
  imageUrl  String
  categories Category[] 
  createdAt DateTime @default(now())
  updated DateTime  @updatedAt

  @@index([storeId])
}

model Category {
  id  String  @id @default(uuid())
  storeId String
  store Store @relation("StoreToCategory", fields: [storeId], references: [id])
  billboardId String
  billboard Billboard @relation(fields: [billboardId], references: [id], onDelete: NoAction, onUpdate: NoAction)  
  products  Product[] @relation("CategoryToProduct")
  name  String
  createdAt DateTime @default(now())
  updated DateTime  @updatedAt

  @@index([storeId])
  @@index([billboardId])
}

model Size {
  id  String  @id @default(uuid())
  storeId String
  store Store @relation("StoreToSize", fields: [storeId], references: [id])
  name  String
  value String
  products Product[]
  createdAt DateTime @default(now())
  updated DateTime  @updatedAt

  @@index([storeId])
}

model Color {
  id  String  @id @default(uuid())
  storeId String
  store Store @relation("StoreToColor", fields: [storeId], references: [id])
  name  String
  value String
  products Product[]
  createdAt DateTime @default(now())
  updated DateTime  @updatedAt

  @@index([storeId])
}

model Product {
  id  String  @id @default(uuid())
  storeId String
  store Store @relation("StoreToProduct", fields: [storeId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  categoryId  String
  category  Category  @relation("CategoryToProduct", fields: [categoryId], references: [id], onDelete: NoAction, onUpdate: NoAction)  
  name  String  
  price Decimal
  quantity  Int
  sale Int @default(0)
  isFeatured  Boolean @default(false)
  isArchived  Boolean @default(false)
  sizeId  String
  size  Size  @relation(fields: [sizeId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  colorId String
  color Color @relation(fields: [colorId], references: [id])
  images Image[]
  orderItems OrderItem[]
  createdAt DateTime @default(now())
  updated DateTime  @updatedAt

  @@index([storeId])
  @@index([categoryId])
  @@index([sizeId])
  @@index([colorId])
}

model Image {
  id  String  @id @default(uuid())
  productId String
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  url String
  createdAt DateTime @default(now())
  updated DateTime  @updatedAt

  @@index([productId])
}

model Order {
  id  String  @id @default(uuid())
  storeId String
  store Store @relation("StoreToOrder", fields: [storeId], references: [id])
  orderItems OrderItem[]
  isPaid  Boolean @default(false)
  phone String  @default("")
  address String  @default("")
  createdAt DateTime @default(now())
  updated DateTime  @updatedAt

  @@index([storeId])
}

model OrderItem {
  id  String  @id @default(uuid())
  orderId String
  order Order @relation(fields: [orderId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  productId String
  product Product @relation(fields: [productId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  quantity Int @default(1)

  @@index([orderId])
  @@index([productId])
}